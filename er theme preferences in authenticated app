[1mdiff --git a/frontend-nextjs/.gitignore b/frontend-nextjs/.gitignore[m
[1mindex 892067b..d25c0b2 100644[m
[1m--- a/frontend-nextjs/.gitignore[m
[1m+++ b/frontend-nextjs/.gitignore[m
[36m@@ -31,3 +31,4 @@[m [myarn-error.log*[m
 # typescript[m
 *.tsbuildinfo[m
 next-env.d.ts[m
[41m+[m
[1mdiff --git a/frontend-nextjs/src/components/Analytics/AnalyticsDashboard.tsx b/frontend-nextjs/src/components/Analytics/AnalyticsDashboard.tsx[m
[1mindex a8f9640..d716476 100644[m
[1m--- a/frontend-nextjs/src/components/Analytics/AnalyticsDashboard.tsx[m
[1m+++ b/frontend-nextjs/src/components/Analytics/AnalyticsDashboard.tsx[m
[36m@@ -248,3 +248,4 @@[m [mconst AnalyticsDashboard = () => {[m
 }[m
 [m
 export default AnalyticsDashboard[m
[41m+[m
[1mdiff --git a/frontend-nextjs/src/components/pages/Auth/Login.tsx b/frontend-nextjs/src/components/pages/Auth/Login.tsx[m
[1mindex 655eac5..389a86c 100644[m
[1m--- a/frontend-nextjs/src/components/pages/Auth/Login.tsx[m
[1m+++ b/frontend-nextjs/src/components/pages/Auth/Login.tsx[m
[36m@@ -1,6 +1,6 @@[m
 'use client'[m
 [m
[31m-import React, { useState, useEffect } from 'react'[m
[32m+[m[32mimport React, { useState } from 'react'[m
 import Link from 'next/link'[m
 import { useRouter } from 'next/navigation'[m
 import { useForm } from 'react-hook-form'[m
[36m@@ -27,15 +27,7 @@[m [mconst Login = () => {[m
     formState: { errors, isSubmitting }[m
   } = useForm<LoginFormData>()[m
 [m
[31m-  // Force light mode for login page[m
[31m-  useEffect(() => {[m
[31m-    if (typeof document !== 'undefined') {[m
[31m-      document.documentElement.classList.remove('dark')[m
[31m-      document.documentElement.style.colorScheme = 'light'[m
[31m-      document.body.style.backgroundColor = '#ffffff'[m
[31m-      document.body.style.color = '#000000'[m
[31m-    }[m
[31m-  }, [])[m
[32m+[m
 [m
   const onSubmit = async (data: LoginFormData) => {[m
     try {[m
[1mdiff --git a/frontend-nextjs/src/components/pages/Auth/Register.tsx b/frontend-nextjs/src/components/pages/Auth/Register.tsx[m
[1mindex f77c07c..bc48b58 100644[m
[1m--- a/frontend-nextjs/src/components/pages/Auth/Register.tsx[m
[1m+++ b/frontend-nextjs/src/components/pages/Auth/Register.tsx[m
[36m@@ -1,6 +1,6 @@[m
 'use client'[m
 [m
[31m-import React, { useState, useEffect } from 'react'[m
[32m+[m[32mimport React, { useState } from 'react'[m
 import Link from 'next/link'[m
 import { useRouter } from 'next/navigation'[m
 import { useForm } from 'react-hook-form'[m
[36m@@ -30,15 +30,7 @@[m [mconst Register = () => {[m
   const router = useRouter()[m
   const { register: registerUser, googleSignIn } = useAuth()[m
 [m
[31m-  // Force light mode for register page[m
[31m-  useEffect(() => {[m
[31m-    if (typeof document !== 'undefined') {[m
[31m-      document.documentElement.classList.remove('dark')[m
[31m-      document.documentElement.style.colorScheme = 'light'[m
[31m-      document.body.style.backgroundColor = '#ffffff'[m
[31m-      document.body.style.color = '#000000'[m
[31m-    }[m
[31m-  }, [])[m
[32m+[m
 [m
   const {[m
     register,[m
[1mdiff --git a/frontend-nextjs/src/components/pages/Landing.tsx b/frontend-nextjs/src/components/pages/Landing.tsx[m
[1mindex fd5e713..c20f9a8 100644[m
[1m--- a/frontend-nextjs/src/components/pages/Landing.tsx[m
[1m+++ b/frontend-nextjs/src/components/pages/Landing.tsx[m
[36m@@ -1,6 +1,6 @@[m
 'use client'[m
 [m
[31m-import React, { useState, useEffect } from 'react'[m
[32m+[m[32mimport React, { useState } from 'react'[m
 import Link from 'next/link'[m
 import { [m
   ArrowRight, [m
[36m@@ -63,13 +63,7 @@[m [mconst Landing = () => {[m
   const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)[m
   const { isAuthenticated, user } = useAuth()[m
 [m
[31m-  // Force light mode for landing page[m
[31m-  useEffect(() => {[m
[31m-    document.documentElement.classList.remove('dark')[m
[31m-    document.documentElement.style.colorScheme = 'light'[m
[31m-    document.body.style.backgroundColor = '#ffffff'[m
[31m-    document.body.style.color = '#000000'[m
[31m-  }, [])[m
[32m+[m
 [m
   const testimonials = [[m
     {[m
[1mdiff --git a/frontend-nextjs/src/context/ThemeContext.tsx b/frontend-nextjs/src/context/ThemeContext.tsx[m
[1mindex 9ac8f02..5459c9d 100644[m
[1m--- a/frontend-nextjs/src/context/ThemeContext.tsx[m
[1m+++ b/frontend-nextjs/src/context/ThemeContext.tsx[m
[36m@@ -1,6 +1,7 @@[m
 'use client'[m
 [m
 import React, { createContext, useContext, useEffect, useState } from 'react'[m
[32m+[m[32mimport { usePathname } from 'next/navigation'[m
 [m
 type Theme = 'light' | 'dark'[m
 [m
[36m@@ -17,6 +18,11 @@[m [mexport function ThemeProvider({ children }: { children: React.ReactNode }) {[m
   const [theme, setTheme] = useState<Theme>('light')[m
   const [systemTheme, setSystemTheme] = useState<Theme | null>(null)[m
   const [mounted, setMounted] = useState(false)[m
[32m+[m[32m  const pathname = usePathname()[m
[32m+[m[41m  [m
[32m+[m[32m  // Define public routes that should always be in light mode[m
[32m+[m[32m  const publicRoutes = ['/', '/login', '/register', '/forgot-password'][m
[32m+[m[32m  const isPublicRoute = publicRoutes.includes(pathname || '')[m
 [m
   // Handle system theme preference[m
   useEffect(() => {[m
[36m@@ -48,8 +54,33 @@[m [mexport function ThemeProvider({ children }: { children: React.ReactNode }) {[m
     if (!mounted) return[m
 [m
     const root = window.document.documentElement[m
[32m+[m[32m    const body = document.body[m
[32m+[m[41m    [m
[32m+[m[32m    // Force light mode for public routes[m
[32m+[m[32m    if (isPublicRoute) {[m
[32m+[m[32m      root.classList.remove('light', 'dark')[m
[32m+[m[32m      root.classList.add('light')[m
[32m+[m[32m      root.style.colorScheme = 'light'[m
[32m+[m[32m      body.style.backgroundColor = '#ffffff'[m
[32m+[m[32m      body.style.color = '#000000'[m
[32m+[m[41m      [m
[32m+[m[32m      // Apply smooth transition class[m
[32m+[m[32m      root.classList.add('theme-transition')[m
[32m+[m[32m      const timeout = setTimeout(() => {[m
[32m+[m[32m        root.classList.remove('theme-transition')[m
[32m+[m[32m      }, 300)[m
[32m+[m[41m      [m
[32m+[m[32m      return () => clearTimeout(timeout)[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    // Apply normal theme for protected routes[m
     root.classList.remove('light', 'dark')[m
     root.classList.add(theme)[m
[32m+[m[32m    root.style.colorScheme = theme[m
[32m+[m[41m    [m
[32m+[m[32m    // Reset body styles for protected routes (let CSS handle it)[m
[32m+[m[32m    body.style.backgroundColor = ''[m
[32m+[m[32m    body.style.color = ''[m
 [m
     // Apply smooth transition class[m
     root.classList.add('theme-transition')[m
[36m@@ -57,11 +88,11 @@[m [mexport function ThemeProvider({ children }: { children: React.ReactNode }) {[m
       root.classList.remove('theme-transition')[m
     }, 300)[m
 [m
[31m-    // Store theme preference[m
[32m+[m[32m    // Store theme preference only if not on public route[m
     localStorage.setItem('theme', theme)[m
 [m
     return () => clearTimeout(timeout)[m
[31m-  }, [theme, mounted])[m
[32m+[m[32m  }, [theme, mounted, isPublicRoute])[m
 [m
   const toggleTheme = () => {[m
     setTheme(prev => (prev === 'light' ? 'dark' : 'light'))[m
